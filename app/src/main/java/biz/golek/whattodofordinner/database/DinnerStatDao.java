package biz.golek.whattodofordinner.database;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import biz.golek.whattodofordinner.business.contract.entities.DinnerStat;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DINNER_STAT".
*/
public class DinnerStatDao extends AbstractDao<DinnerStat, Long> {

    public static final String TABLENAME = "DINNER_STAT";

    /**
     * Properties of entity DinnerStat.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, int.class, "type", false, "TYPE");
        public final static Property Date = new Property(2, java.util.Date.class, "date", false, "DATE");
        public final static Property DinnerId = new Property(3, long.class, "dinnerId", false, "DINNER_ID");
    };

    private Query<DinnerStat> dinner_DinnerIngredientDinnerQuery;

    public DinnerStatDao(DaoConfig config) {
        super(config);
    }
    
    public DinnerStatDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DINNER_STAT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TYPE\" INTEGER NOT NULL ," + // 1: type
                "\"DATE\" INTEGER NOT NULL ," + // 2: date
                "\"DINNER_ID\" INTEGER NOT NULL );"); // 3: dinnerId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DINNER_STAT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DinnerStat entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getType());
        stmt.bindLong(3, entity.getDate().getTime());
        stmt.bindLong(4, entity.getDinnerId());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DinnerStat readEntity(Cursor cursor, int offset) {
        DinnerStat entity = new DinnerStat( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // type
            new java.util.Date(cursor.getLong(offset + 2)), // date
            cursor.getLong(offset + 3) // dinnerId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DinnerStat entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.getInt(offset + 1));
        entity.setDate(new java.util.Date(cursor.getLong(offset + 2)));
        entity.setDinnerId(cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DinnerStat entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DinnerStat entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "DinnerIngredientDinner" to-many relationship of Dinner. */
    public List<DinnerStat> _queryDinner_DinnerIngredientDinner(long dinnerId) {
        synchronized (this) {
            if (dinner_DinnerIngredientDinnerQuery == null) {
                QueryBuilder<DinnerStat> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.DinnerId.eq(null));
                queryBuilder.orderRaw("T.'DATE' ASC,T.'TYPE' ASC");
                dinner_DinnerIngredientDinnerQuery = queryBuilder.build();
            }
        }
        Query<DinnerStat> query = dinner_DinnerIngredientDinnerQuery.forCurrentThread();
        query.setParameter(0, dinnerId);
        return query.list();
    }

}
