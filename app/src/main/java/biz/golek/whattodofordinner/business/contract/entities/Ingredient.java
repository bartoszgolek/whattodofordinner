package biz.golek.whattodofordinner.business.contract.entities;

import java.util.List;
import biz.golek.whattodofordinner.database.DaoSession;
import de.greenrobot.dao.DaoException;

import biz.golek.whattodofordinner.database.DinnerIngredientDao;
import biz.golek.whattodofordinner.database.IngredientDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "INGREDIENT".
 */
public class Ingredient {

    private Long id;
    private Short Name;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient IngredientDao myDao;

    private List<DinnerIngredient> DinnerIngredientToIngredients;

    public Ingredient() {
    }

    public Ingredient(Long id) {
        this.id = id;
    }

    public Ingredient(Long id, Short Name) {
        this.id = id;
        this.Name = Name;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getIngredientDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Short getName() {
        return Name;
    }

    public void setName(Short Name) {
        this.Name = Name;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DinnerIngredient> getDinnerIngredientToIngredients() {
        if (DinnerIngredientToIngredients == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DinnerIngredientDao targetDao = daoSession.getDinnerIngredientDao();
            List<DinnerIngredient> DinnerIngredientToIngredientsNew = targetDao._queryIngredient_DinnerIngredientToIngredients(id);
            synchronized (this) {
                if(DinnerIngredientToIngredients == null) {
                    DinnerIngredientToIngredients = DinnerIngredientToIngredientsNew;
                }
            }
        }
        return DinnerIngredientToIngredients;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDinnerIngredientToIngredients() {
        DinnerIngredientToIngredients = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
